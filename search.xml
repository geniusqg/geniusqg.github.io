<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>django应用redis分布式锁</title>
    <url>/2022/django%E5%BA%94%E7%94%A8redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html</url>
    <content><![CDATA[<h3 id="什么是分布式"><a href="#什么是分布式" class="headerlink" title="什么是分布式"></a>什么是分布式</h3><p>分布式的CAP理论告诉我们:</p>
<blockquote>
<p>任何一个分布式系统都无法同时满足一致性（Consistency）、可用性（Availability）和<br>分区容错性（Partition tolerance）， 最多只能同时满足两项。</p>
</blockquote>
<p>基于CAP理论，分布式系统无法同时满足一致性、可用性和分区容错性这三个特性。很多系统在设计之初就要对这三者做出取舍。<br>在互联网领域的绝大多数的场景中，都需要牺牲强一致性来换取系统的高可用性，系统往往只需要保证最终一致性。</p>
<span id="more"></span>
<h3 id="什么是分布式锁"><a href="#什么是分布式锁" class="headerlink" title="什么是分布式锁"></a>什么是分布式锁</h3><ul>
<li>用来控制在分布式系统之间同步访问共享资源。</li>
<li>可以用redis，zookeeper，数据库实现分布式锁</li>
</ul>
<h3 id="django-redis-backend在django实现redis分布式锁"><a href="#django-redis-backend在django实现redis分布式锁" class="headerlink" title="django_redis backend在django实现redis分布式锁"></a>django_redis backend在django实现redis分布式锁</h3><h4 id="配置setting"><a href="#配置setting" class="headerlink" title="配置setting"></a>配置setting</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django_redis.cache.RedisCache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;LOCATION&#x27;</span>: <span class="string">&#x27;redis://localhost:6379/1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;CLIENT_CLASS&#x27;</span>: <span class="string">&#x27;django_redis.client.DefaultClient&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;PICKLE_VERSION&#x27;</span>: -<span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;SOCKET_TIMEOUT&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&#x27;IGNORE_EXCEPTIONS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">django_redis_lock</span>(<span class="params">thread_name</span>):</span><br><span class="line">    <span class="keyword">with</span> cache.lock(key=<span class="string">&#x27;django_redis_lock&#x27;</span>, timeout=<span class="number">20</span>, sleep=<span class="number">0.05</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;thread_name&#125;</span> lock start at <span class="subst">&#123;datetime.datetime.now()&#125;</span>&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">15</span>) <span class="comment"># 业务逻辑处理</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;thread_name&#125;</span> lock end at <span class="subst">&#123;datetime.datetime.now()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    t1 = threading.Thread(target=django_redis_lock, args=(<span class="string">&#x27;thread 1&#x27;</span>,))</span><br><span class="line">    t2 = threading.Thread(target=django_redis_lock, args=(<span class="string">&#x27;thread 2&#x27;</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">thread 2 lock start at 2022-10-17 15:57:36.161013</span><br><span class="line">thread 2 lock end at 2022-10-17 15:57:51.171763</span><br><span class="line">thread 1 lock start at 2022-10-17 15:57:51.203869</span><br><span class="line">thread 1 lock end at 2022-10-17 15:58:06.210411</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h4><ul>
<li><p>如果某一系统加锁之后，其中的业务逻辑处理时间较长，造成分布式锁已经释放，但业务逻辑还没处理完。导致其他系统依然可以获取分布式锁。</p>
</li>
<li><p>实际情况是另一系统获取锁失败</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis.exceptions.LockError: Cannot release a lock that<span class="string">&#x27;s no longer owned</span></span><br></pre></td></tr></table></figure>
<p>翻看源码可知，cache.lock会产生key来确保仅当前系统可使用该锁，所以当其他系统试图获取锁时，直接报错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lock</span>(<span class="params">self, key, version=<span class="literal">None</span>, timeout=<span class="literal">None</span>, sleep=<span class="number">0.1</span>,</span></span><br><span class="line"><span class="params">         blocking_timeout=<span class="literal">None</span>, client=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> client <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        client = self.get_client(write=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    key = self.make_key(key, version=version)</span><br><span class="line">    <span class="keyword">return</span> client.lock(key, timeout=timeout, sleep=sleep,</span><br><span class="line">                       blocking_timeout=blocking_timeout)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>解决方式</strong>：可以通过续租的方式来解决上述问题（即延长lock key的timeout时间）。python库<a href="https://pypi.org/project/python-redis-lock/3.7.0/#description">python-redis-lock</a><br>提供了解决方案。</p>
</li>
</ul>
<h3 id="redis-lock-backend在django实现redis分布式锁"><a href="#redis-lock-backend在django实现redis分布式锁" class="headerlink" title="redis_lock backend在django实现redis分布式锁"></a>redis_lock backend在django实现redis分布式锁</h3><h4 id="配置setting-1"><a href="#配置setting-1" class="headerlink" title="配置setting"></a>配置setting</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;redis_lock.django_cache.RedisCache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;LOCATION&#x27;</span>: <span class="string">&#x27;redis://localhost:6379/1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;CLIENT_CLASS&#x27;</span>: <span class="string">&#x27;django_redis.client.DefaultClient&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;PICKLE_VERSION&#x27;</span>: -<span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;SOCKET_TIMEOUT&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&#x27;IGNORE_EXCEPTIONS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">django_redis_lock</span>(<span class="params">thread_name</span>):</span><br><span class="line">    <span class="keyword">with</span> cache.lock(key=<span class="string">&#x27;test_lock&#x27;</span>, expire=<span class="number">10</span>, auto_renewal=<span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;thread_name&#125;</span> lock start at <span class="subst">&#123;datetime.datetime.now()&#125;</span>&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;thread_name&#125;</span> lock end at <span class="subst">&#123;datetime.datetime.now()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    t1 = threading.Thread(target=django_redis_lock, args=(<span class="string">&#x27;thread 1&#x27;</span>,))</span><br><span class="line">    t2 = threading.Thread(target=django_redis_lock, args=(<span class="string">&#x27;thread 2&#x27;</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br></pre></td></tr></table></figure>
<ul>
<li>与django-redis唯一的区别在于多了auto_renewal&#x3D;True，当此参数为True时，lock超时会自动续租。</li>
<li>这样运行的结果，会报一个超时的错<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis.exceptions.TimeoutError: Timeout reading from socket</span><br></pre></td></tr></table></figure></li>
<li>原因在于django CACHES配置的SOCKET_TIMEOUT(此配置参数是指Redis发出命令接收响应的时间不能超过此参数设置时间。<br>如果超过了此时间，将会抛出异常：redis.exceptions.TimeoutError: Timeout reading from socket, 即读取响应超时。）<br>设置了5秒，而锁的超时时间为10秒。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="string">&#x27;SOCKET_TIMEOUT&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>redis_lock底层使用了BLPOP来实现阻塞，等待锁释放。所以当SOCKET_TIMEOUT小于锁超时时间时，redis抛出了TimeoutError。</li>
<li><strong>解决方案</strong>: 只需增大SOCKET_TIMEOUT即可<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="string">&#x27;SOCKET_TIMEOUT&#x27;</span>: <span class="number">20</span>,</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">thread 2 lock start at 2022-10-17 16:46:22.272820</span><br><span class="line">thread 2 lock end at 2022-10-17 16:46:27.278103</span><br><span class="line">thread 1 lock start at 2022-10-17 16:46:27.279176</span><br><span class="line">thread 1 lock end at 2022-10-17 16:46:32.284514</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ol>
<li><a href="http://kaito-kidd.com/2021/06/08/is-redis-distributed-lock-really-safe/">深度剖析：Redis分布式锁到底安全吗？看完这篇文章彻底懂了！</a></li>
<li><a href="https://www.cnblogs.com/hanease/p/15864368.html">分布式锁的实现</a></li>
<li><a href="https://www.jianshu.com/p/865c8ab07d0f">Python Redis连接timeout参数配置详解</a></li>
</ol>
]]></content>
      <categories>
        <category>2022</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>jupyter安装不同版本python</title>
    <url>/2022/jupyter%E5%AE%89%E8%A3%85%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpython.html</url>
    <content><![CDATA[<h3 id="利用pyenv安装python-3-9-0"><a href="#利用pyenv安装python-3-9-0" class="headerlink" title="利用pyenv安装python 3.9.0"></a>利用pyenv安装python 3.9.0</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install 3.9.0</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="创建python虚拟环境并切换"><a href="#创建python虚拟环境并切换" class="headerlink" title="创建python虚拟环境并切换"></a>创建python虚拟环境并切换</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv virtualenv 3.9.0 py39</span><br><span class="line">pyenv activate py39</span><br></pre></td></tr></table></figure>

<h3 id="安装ipykernel"><a href="#安装ipykernel" class="headerlink" title="安装ipykernel"></a>安装ipykernel</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install ipykernel</span><br></pre></td></tr></table></figure>

<h3 id="通过ipython安装jupyter-kernel"><a href="#通过ipython安装jupyter-kernel" class="headerlink" title="通过ipython安装jupyter kernel"></a>通过ipython安装jupyter kernel</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对全部用户安装生效</span></span><br><span class="line">ipython kernel install --name py39</span><br><span class="line"><span class="comment"># 只对当前用户安装</span></span><br><span class="line">ipython kernel install --user --name py39</span><br></pre></td></tr></table></figure>

<h3 id="退出当前虚拟环境并重启jupyterlab"><a href="#退出当前虚拟环境并重启jupyterlab" class="headerlink" title="退出当前虚拟环境并重启jupyterlab"></a>退出当前虚拟环境并重启jupyterlab</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv deactivate</span><br><span class="line">jupyter lab --allow-root</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>2022</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>wsl2下jupyterlab开机自启动</title>
    <url>/2022/wsl2%E4%B8%8Bjupyterlab%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8.html</url>
    <content><![CDATA[<h3 id="wsl2系统：ubuntu-18-04"><a href="#wsl2系统：ubuntu-18-04" class="headerlink" title="wsl2系统：ubuntu 18.04"></a>wsl2系统：ubuntu 18.04</h3><h3 id="编写启动停止脚本"><a href="#编写启动停止脚本" class="headerlink" title="编写启动停止脚本"></a>编写启动停止脚本</h3><h4 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h4><ul>
<li><p>在~&#x2F;.jupyter&#x2F;bin目录下将如下内容写入startup.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"><span class="built_in">cd</span> /path/to/jupyter</span><br><span class="line">/usr/bin/nohup jupyter lab --allow-root &gt;&gt; ~/.jupyter/log/stdout.log 2&gt;&amp;1 &amp; <span class="built_in">echo</span> $! &gt; ~/.jupyter/log/jupyterlab.pid;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
</li>
<li><p>设置可执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 startup.sh </span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="停止脚本"><a href="#停止脚本" class="headerlink" title="停止脚本"></a>停止脚本</h4><ul>
<li>在~&#x2F;.jupyter&#x2F;bin目录下将如下内容写入shutdown.sh<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"><span class="built_in">cat</span> ~/.jupyter/log/jupyterlab.pid | xargs <span class="built_in">kill</span> -9;</span><br></pre></td></tr></table></figure></li>
<li>设置可执行权限<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 shutdown.sh</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="编写系统service脚本"><a href="#编写系统service脚本" class="headerlink" title="编写系统service脚本"></a>编写系统service脚本</h3><ul>
<li>在&#x2F;etc&#x2F;init.d目录下将如下内容写入jupyter<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># description: jupyter startup scripts</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">startup=<span class="string">&quot;~/.jupyter/bin/startup.sh&quot;</span></span><br><span class="line">shutdown=<span class="string">&quot;~/.jupyter/bin/shutdown.sh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">        <span class="variable">$startup</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;jupyterlab started.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$shutdown</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;jupyterlab stopped.&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># See how we were called.</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">	ps -ef | grep jupyter-lab</span><br><span class="line">        ;;</span><br><span class="line">    restart)</span><br><span class="line">        stop</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">&quot;Usage: <span class="variable">$0</span> &#123;start|stop|status|restart&#125;&quot;</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="加入wsl2开机启动项"><a href="#加入wsl2开机启动项" class="headerlink" title="加入wsl2开机启动项"></a>加入wsl2开机启动项</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;service jupyter restart&#x27;</span> &gt;&gt; /etc/start.wsl</span><br></pre></td></tr></table></figure>

<h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><h4 id="开机启动后，查看log发现有个报错"><a href="#开机启动后，查看log发现有个报错" class="headerlink" title="开机启动后，查看log发现有个报错"></a>开机启动后，查看log发现有个报错</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+ Start <span class="string">&quot;file:///root/.local/share/jupyter/runtime/jpserver-10268-open. ...</span></span><br><span class="line"><span class="string">+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string">    + CategoryInfo          : InvalidOperation: (:) [Start-Process]��InvalidOperationException</span></span><br><span class="line"><span class="string">    + FullyQualifiedErrorId : InvalidOperationException,Microsoft.PowerShell.Commands.StartProcessCommand</span></span><br></pre></td></tr></table></figure>

<h5 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h5><ul>
<li><p>生成jupyter配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>
<p>生成的配置文件在&#x2F;root&#x2F;.jupyter&#x2F;jupyter_lab_config.py</p>
</li>
<li><p>在配置文件中找到c.ServerApp.use_redirect_file<br>默认被注释且等于True，把注释放开，修改值为False</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">c.ServerApp.use_redirect_file=False</span><br></pre></td></tr></table></figure>
</li>
<li><p>具体可参考<br><a href="https://github.com/jupyter/jupyter_core/issues/191">Jupyter Notebook does not load using ubuntu 18.04 LTS in windows 10 #191</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>2022</category>
      </categories>
      <tags>
        <tag>jupyter</tag>
        <tag>wsl2</tag>
      </tags>
  </entry>
  <entry>
    <title>wsl2开机启动服务</title>
    <url>/2022/wsl2%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1.html</url>
    <content><![CDATA[<h3 id="wsl-开机启动"><a href="#wsl-开机启动" class="headerlink" title="wsl 开机启动"></a>wsl 开机启动</h3><h4 id="创建脚本："><a href="#创建脚本：" class="headerlink" title="创建脚本："></a>创建脚本：</h4><p>路径&#x2F;etc&#x2F;start.wsl<br>内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service ssh restart</span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>
<p>给予执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /etc/init.wsl</span><br></pre></td></tr></table></figure>
<h4 id="windows设置"><a href="#windows设置" class="headerlink" title="windows设置"></a>windows设置</h4><p>创建脚本 ubuntu.vbs</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Set ws = WScript.CreateObject(<span class="string">&quot;WScript.Shell&quot;</span>)</span><br><span class="line">ws.run <span class="string">&quot;wsl -d Ubuntu-18.04 -u root /etc/start.wsl restart&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>设置Win10开机启动项Windows下:Win+R输入shell:startup。 </li>
<li>将ubuntu.vbs拖入到打开的文件夹中，Win10开机便会自动启动。</li>
</ul>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="http://xin.el0310.com/index.php/post/276.html">http://xin.el0310.com/index.php/post/276.html</a></p>
]]></content>
      <categories>
        <category>2022</category>
      </categories>
      <tags>
        <tag>wsl2</tag>
      </tags>
  </entry>
</search>
